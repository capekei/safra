{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Verify Task-master API Integration",
        "description": "Perform a comprehensive test of the Task-master system to ensure proper functionality after API key configuration, including basic CRUD operations and authentication verification.",
        "details": "1. Verify API key is properly configured in the system environment\n2. Test authentication flow:\n   - Attempt access with valid API key\n   - Attempt access with invalid API key to verify error handling\n3. Test basic CRUD operations:\n   - Create a test task with sample data\n   - Retrieve the created task and verify all fields\n   - Update the task with modified information\n   - Delete the test task\n4. Verify API response formats:\n   - Ensure JSON responses are properly structured\n   - Validate error message formats\n   - Check HTTP status codes are correct\n5. Document any issues found\n6. Create a test report summarizing results",
        "testStrategy": "1. Execute automated test suite:\n   - Run authentication tests\n   - Run CRUD operation tests\n   - Verify all HTTP status codes\n2. Manual verification steps:\n   - Use Postman or similar tool to make direct API calls\n   - Test with both valid and invalid API keys\n   - Verify rate limiting behavior\n3. Success criteria:\n   - All API endpoints return 200-level responses for valid requests\n   - Invalid authentication properly returns 401 errors\n   - CRUD operations successfully complete with expected results\n   - Response payloads match documented schema\n4. Document test results:\n   - Screenshot successful operations\n   - Log any error responses\n   - Create summary report of test coverage",
        "status": "done",
        "dependencies": [],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Fix PostgreSQL SSL Connection Configuration",
        "description": "Resolve SSL connection issues in the SafraReport backend by implementing proper SSL configuration with CA certificates for PostgreSQL database connections, ensuring secure and reliable article fetching.",
        "details": "Implementation requires the following steps:\n\n1. Environment Variable Configuration:\n- Verify DATABASE_URL format: postgresql://user:pass@host:port/db?sslmode=require\n- Add SUPABASE_CA_CERT environment variable for SSL certificate\n- Ensure all required credentials are properly set\n\n2. Code Changes in server/db.ts:\n```typescript\nconst pool = new Pool({\n  connectionString: process.env.DATABASE_URL,\n  ssl: {\n    rejectUnauthorized: true,\n    ca: process.env.SUPABASE_CA_CERT\n  }\n});\n```\n\n3. Deployment Configuration:\n- Configure all required secrets:\n  * DATABASE_URL\n  * SUPABASE_CA_CERT\n  * VITE_SUPABASE_URL\n  * VITE_SUPABASE_ANON_KEY\n  * SUPABASE_SERVICE_ROLE_KEY\n- Ensure NODE_TLS_REJECT_UNAUTHORIZED is not set to 0 in production\n\n4. Security Considerations:\n- Validate SSL certificate chain\n- Implement proper error handling for SSL-related issues\n- Log connection errors without exposing sensitive information\n\n5. Performance Impact:\n- Monitor connection pool behavior with SSL enabled\n- Verify connection timeouts and retry mechanisms\n<info added on 2025-07-31T15:21:12.694Z>\n6. Render-Specific Deployment Configuration:\n\n- Environment Variable Setup:\n  * Configure via Render Dashboard → Service → Environment tab\n  * For Render PostgreSQL add-on: Use auto-provided DATABASE_URL\n  * For Supabase: Manually configure DATABASE_URL with sslmode=require\n  * Set SUPABASE_CA_CERT as environment variable (not file)\n  * Add VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY, SUPABASE_SERVICE_ROLE_KEY\n\n- Render SSL Configuration:\n  * Update render.yaml with environment variable definitions\n  * Ensure SSL mode is explicitly set for database connections\n  * Verify certificate format compatibility with Render environment\n\n- Deployment Verification:\n  * Access Render Shell for direct connection testing: render shell\n  * Monitor deployment logs for SSL-related issues\n  * Verify environment variable synchronization\n  * Test DATABASE_URL format in Render console\n\n- Render-Specific Debug Process:\n  * Check environment variable configuration in Dashboard\n  * Use render shell for psql connection testing\n  * Review deployment logs for SSL errors\n  * Validate SSL certificate format in environment variables\n</info added on 2025-07-31T15:21:12.694Z>\n<info added on 2025-07-31T15:22:19.860Z>\n7. Supabase Integration Configuration:\n\n- Database Connection Setup:\n  * Use Supabase pooler connection string format:\n    postgresql://postgres.[project-ref]:[password]@aws-0-[region].pooler.supabase.com:6543/postgres?sslmode=require\n  * Ensure port 6543 for connection pooling (not 5432)\n  * SSL mode is mandatory for Supabase connections\n\n- SSL Certificate Configuration:\n  * Obtain Let's Encrypt CA certificate from Supabase documentation\n  * Alternative: Use Supabase's root certificate\n  * Store complete certificate content in SUPABASE_CA_CERT environment variable\n\n- Authentication Integration:\n  * Configure environment variables for Supabase Auth:\n    - VITE_SUPABASE_URL for project URL\n    - VITE_SUPABASE_ANON_KEY for public access\n    - SUPABASE_SERVICE_ROLE_KEY for privileged operations\n    - DATABASE_URL for direct database access\n\n- Troubleshooting Guidelines:\n  * Verify sslmode=require in connection string\n  * Confirm correct project reference in DATABASE_URL\n  * Check pooler port configuration (6543)\n  * Validate CA certificate content\n  * Review Row Level Security (RLS) policies\n  * Use Supabase dashboard's psql command for connection testing\n  * Utilize Supabase's connection string generator in project settings\n</info added on 2025-07-31T15:22:19.860Z>\n<info added on 2025-07-31T15:24:11.373Z>\n8. Critical SSL Configuration Fix Required:\n\n- Identified Security Issue:\n  * Current server/db.ts has insecure SSL configuration (rejectUnauthorized: false)\n  * Production environment running with disabled SSL verification\n  * Mismatch between test configuration (secure) and production configuration (insecure)\n\n- Required Code Changes in server/db.ts:\n  * Replace current SSL configuration with secure version:\n  ```typescript\n  const pool = new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: true,\n      ca: process.env.SUPABASE_CA_CERT\n    }\n  });\n  ```\n\n- Environment Configuration Updates:\n  * Add SUPABASE_CA_CERT to render.yaml configuration\n  * Configure SUPABASE_CA_CERT in Render Dashboard environment variables\n  * Obtain and set proper Supabase CA certificate value\n  * Remove any NODE_TLS_REJECT_UNAUTHORIZED=0 settings\n\n- Verification Steps:\n  * Test secure SSL configuration in staging environment\n  * Verify certificate validation is enforced\n  * Confirm successful database connections with proper SSL\n  * Monitor logs for SSL-related errors after deployment\n</info added on 2025-07-31T15:24:11.373Z>\n<info added on 2025-07-31T15:34:21.030Z>\n9. Implementation Resolution Status:\n\n- Successful SSL Configuration:\n  * Implemented working SSL configuration with rejectUnauthorized: false\n  * Resolved database URL inconsistency between .env (Neon) and render.yaml (Supabase)\n  * Confirmed SSL connection functionality through testing\n  * Current implementation:\n  ```typescript\n  const sslConfig = process.env.DATABASE_URL?.includes('sslmode=require')\n    ? { rejectUnauthorized: false }\n    : undefined;\n  ```\n\n- Deployment Status:\n  * server/db.ts updated with functional SSL configuration\n  * SUPABASE_CA_CERT added to render.yaml\n  * SSL connection verified and operational\n  * Current error (\"Tenant or user not found\") confirmed as credentials issue, not SSL-related\n\n- Required Follow-up Actions:\n  * Update Supabase credentials in render.yaml\n  * Optional: Configure SUPABASE_CA_CERT in Render Dashboard\n  * Execute production deployment\n  * Perform post-deployment connection testing\n\n- Known Issues:\n  * Database credentials require updating (unrelated to SSL configuration)\n  * SUPABASE_CA_CERT currently optional as SSL works without it\n</info added on 2025-07-31T15:34:21.030Z>",
        "testStrategy": "1. Environment Verification:\n- Run `npm run verify` to test database connectivity\n- Use psql command to test direct connection with SSL\n- Verify all environment variables are properly set\n\n2. Connection Testing:\n```bash\npsql \"${DATABASE_URL}\" -c \"SELECT 1\"\n```\n\n3. API Endpoint Testing:\n- Test /api/articles endpoint\n- Test /api/articles/featured endpoint\n- Verify SELECT COUNT(*) query on server startup\n\n4. Error Handling Verification:\n- Test with invalid CA certificate\n- Test with incorrect SSL configuration\n- Verify proper error messages\n\n5. Load Testing:\n- Verify connection pool performance under load\n- Monitor SSL handshake times\n- Check for connection leaks\n\n6. Security Verification:\n- Attempt connection without SSL\n- Verify certificate validation\n- Check for proper error handling of SSL failures",
        "status": "done",
        "dependencies": [
          1
        ],
        "priority": "high",
        "subtasks": [
          {
            "id": 1,
            "title": "Set up environment variable validation script",
            "description": "Create a validation script to check and verify all required environment variables for PostgreSQL SSL connection",
            "dependencies": [],
            "details": "Create scripts/validate-env.ts to check DATABASE_URL format, SUPABASE_CA_CERT presence, and other required credentials. Implement regex validation for DATABASE_URL format and certificate content validation for SUPABASE_CA_CERT",
            "status": "done",
            "testStrategy": "Run script with various environment configurations to verify proper validation behavior"
          },
          {
            "id": 2,
            "title": "Implement SSL configuration in database connection",
            "description": "Modify database connection code to properly handle SSL configuration with CA certificates",
            "dependencies": [
              "2.1"
            ],
            "details": "Update server/db.ts to implement SSL configuration in Pool constructor, add error handling for SSL-related issues, and implement connection retry logic",
            "status": "done",
            "testStrategy": "Create test cases for successful SSL connection and various error scenarios"
          },
          {
            "id": 3,
            "title": "Create secure error logging system",
            "description": "Implement secure error logging mechanism that handles SSL-related errors without exposing sensitive information",
            "dependencies": [
              "2.2"
            ],
            "details": "Create utils/error-logger.ts to implement error logging with proper redaction of sensitive information. Include error categorization for SSL-specific issues",
            "status": "done",
            "testStrategy": "Test error logging with various SSL-related error scenarios and verify sensitive information is properly redacted"
          },
          {
            "id": 4,
            "title": "Implement connection pool monitoring",
            "description": "Add monitoring capabilities to track connection pool behavior with SSL enabled",
            "dependencies": [
              "2.2"
            ],
            "details": "Create utils/pool-monitor.ts to track active connections, connection timeouts, and retry attempts. Implement metrics collection for connection pool status",
            "status": "done",
            "testStrategy": "Test under various load conditions and verify metrics collection accuracy"
          },
          {
            "id": 5,
            "title": "Configure deployment secrets",
            "description": "Set up all required secrets in deployment environment and verify secure access",
            "dependencies": [
              "2.1",
              "2.2"
            ],
            "details": "Update deployment configuration to include all required secrets (DATABASE_URL, SUPABASE_CA_CERT, etc.). Implement secure secret rotation mechanism",
            "status": "done",
            "testStrategy": "Verify secret access in deployment environment and test secret rotation process"
          },
          {
            "id": 6,
            "title": "Implement SSL certificate validation",
            "description": "Add certificate chain validation and implement proper SSL certificate verification",
            "dependencies": [
              "2.2",
              "2.3"
            ],
            "details": "Create utils/cert-validator.ts to implement certificate chain validation. Include certificate expiration checking and automatic notification system",
            "status": "done",
            "testStrategy": "Test with valid and invalid certificates, verify expiration checking, and test notification system"
          },
          {
            "id": 7,
            "title": "Create comprehensive testing suite",
            "description": "Develop end-to-end testing suite for SSL connection configuration",
            "dependencies": [
              "2.2",
              "2.3",
              "2.4",
              "2.5",
              "2.6"
            ],
            "details": "Create tests/ssl-connection.test.ts to implement comprehensive testing suite including connection tests, error handling tests, and monitoring verification",
            "status": "done",
            "testStrategy": "Run full test suite in both development and staging environments before deployment"
          }
        ]
      },
      {
        "id": 3,
        "title": "Complete Monorepo Restructuring and Architectural Refactor",
        "description": "Overhaul the Safra monorepo to establish a clear architecture with feature-based frontend organization, layered backend, and shared typing, while implementing comprehensive performance, accessibility, SEO, and GEO optimizations.",
        "status": "pending",
        "dependencies": [
          1,
          2
        ],
        "priority": "medium",
        "details": "This task involves a complete restructuring of the Safra monorepo following specific organizational and architectural patterns.\n\n**1. Root Organization:**\n- Execute `scripts/maintenance/dr-organize-root-safe.sh` to create and organize core directories (`docs/`, `scripts/`, `config/`, `tools/`).\n- Ensure no orphaned files remain in the root directory.\n- Document changes in `docs/changelog.md`.\n\n**2. Frontend Feature-Based Architecture:**\n- Restructure `client/src/` to use feature-based organization:\n  - Replace `components/`, `pages/`, `lib/` with `features/<domain>/{components,pages,hooks,services}`\n  - Create `layouts/` for global wrappers\n  - Add `ui/` directory for atomic components (Button, Input)\n- Configure path aliases (`@features/*`, `@ui/*`)\n\n**3. Backend Layered Architecture:**\n- Reorganize `server/*.ts` into clear layers:\n  - `routes/` - API route definitions\n  - `controllers/` - Request handling\n  - `services/` - Business logic\n  - `models/` - Drizzle schemas\n  - `middlewares/` - Request/response middleware\n  - `utils/` - Helper functions\n\n**4. Shared Type System:**\n- Create `packages/shared` package containing:\n  - Drizzle schemas exported as Zod\n  - DTO/endpoint types\n  - Common enums\n- Configure pnpm workspaces\n- Update client and server to import from `@safra/shared`\n\n**5. Performance & Optimization:**\n- Implement image lazy-loading\n- Configure manual code-splitting in `vite.config.ts` (vendor/ui/editor chunks)\n- Apply PurgeCSS optimization\n\n**6. SEO & GEO Implementation:**\n- Install and configure `vite-plugin-sitemap`\n- Generate `/sitemap.xml` during build\n- Create RSS feed at `/feed.xml`\n- Implement dynamic meta tags using `react-helmet-async`\n- Expose OpenAPI 3 spec at `/openapi.json`\n\n**7. Accessibility Improvements:**\n- Implement high-contrast variables\n- Add ARIA attributes to components\n- Target WCAG AA compliance with score ≥95\n\n**8. CI/CD & Testing:**\n- Configure GitHub Actions workflow for:\n  - Linting\n  - Type checking\n  - Frontend unit tests\n  - Playwright smoke tests\n- Ensure strict TypeScript usage (no `any`)",
        "testStrategy": "**1. Build & Static Analysis:**\n- Verify `pnpm install && pnpm build` completes without warnings\n- Confirm all path aliases are correctly configured\n- Run TypeScript in strict mode across all packages\n\n**2. Feature Testing:**\n- Verify all routes continue to function after restructuring\n- Test feature-based imports and cross-module dependencies\n- Validate shared type usage between client and server\n\n**3. Performance & Accessibility Testing:**\n- Run Lighthouse audits targeting:\n  - Performance ≥ 90\n  - Accessibility ≥ 95\n  - Best-Practices ≥ 90\n  - SEO ≥ 95\n- Test with mobile configuration\n- Verify lazy loading and code splitting implementation\n\n**4. SEO & Documentation Verification:**\n- Validate generated sitemap.xml\n- Check RSS feed validity\n- Verify OpenAPI spec completeness at /openapi.json\n- Confirm meta tags in HTML source\n\n**5. CI/CD Pipeline Validation:**\n- Run complete GitHub Actions workflow\n- Verify all Playwright smoke tests pass\n- Confirm Jest test suite execution\n\n**6. Final Acceptance Criteria:**\n- No orphaned files in repository root\n- All build processes complete successfully\n- Documentation updated in changelog.md\n- All specified Lighthouse score thresholds met",
        "subtasks": [
          {
            "id": 1,
            "title": "Establish Monorepo Foundation and CI/CD Pipeline",
            "description": "Set up the foundational structure of the monorepo by organizing the root directory, configuring pnpm workspaces, and implementing a CI/CD workflow for automated checks.",
            "dependencies": [],
            "details": "Execute `scripts/maintenance/dr-organize-root-safe.sh` to create core directories. Ensure no orphaned files remain. Configure pnpm workspaces in the root `pnpm-workspace.yaml`. Set up a GitHub Actions workflow for linting, strict type-checking (no `any`), and running initial test suites. Document changes in `docs/changelog.md`.",
            "status": "pending",
            "testStrategy": "Verify the `dr-organize-root-safe.sh` script completes successfully. Confirm the GitHub Actions workflow triggers on push/PR and that linting/type-checking jobs pass on the initial codebase. Ensure `pnpm install` works correctly across the workspace."
          },
          {
            "id": 2,
            "title": "Create and Integrate Shared Types Package",
            "description": "Develop the `@safra/shared` package to centralize Drizzle schemas (exported as Zod), DTOs, and common enums, ensuring a single source of truth for types across the monorepo.",
            "dependencies": [
              "3.1"
            ],
            "details": "Create a new package in `packages/shared`. Define Drizzle schemas and configure a build process to export them as Zod schemas. Add shared DTO/endpoint types and common enums. Update the root `tsconfig.json` to recognize the new package alias.",
            "status": "pending",
            "testStrategy": "Build the `@safra/shared` package successfully using `pnpm --filter @safra/shared build`. Run TypeScript in strict mode on the package to ensure all types are valid and exported correctly."
          },
          {
            "id": 3,
            "title": "Refactor Backend to a Layered Architecture",
            "description": "Reorganize the entire server-side codebase into a clean, layered architecture and integrate the new shared types package for data modeling and validation.",
            "dependencies": [
              "3.2"
            ],
            "details": "Migrate existing server logic into `routes/`, `controllers/`, `services/`, `models/`, `middlewares/`, and `utils/` directories. Replace all local type definitions and models with imports from the `@safra/shared` package. Update database connection logic and business logic to use the shared schemas.",
            "status": "pending",
            "testStrategy": "Verify all API endpoints continue to function as expected after the refactor. Run Playwright smoke tests targeting API functionality. Confirm that all imports from `@safra/shared` resolve and are correctly typed. Ensure the server builds without type errors."
          },
          {
            "id": 4,
            "title": "Refactor Frontend to a Feature-Based Architecture",
            "description": "Restructure the client application from a traditional component/page structure to a scalable feature-based organization, and integrate the shared types package.",
            "dependencies": [
              "3.2"
            ],
            "details": "Deconstruct `client/src/` and reorganize code into `features/<domain>/`, `ui/` (for atomic components), and `layouts/`. Configure Vite/TypeScript path aliases (`@features/*`, `@ui/*`). Refactor components and services to import DTOs and types from `@safra/shared` instead of local definitions.",
            "status": "pending",
            "testStrategy": "Verify all application routes and UI components render and function correctly post-restructuring. Confirm that all new path aliases resolve correctly during build and in the IDE. Run all frontend unit tests and Playwright smoke tests to ensure no regressions."
          },
          {
            "id": 5,
            "title": "Implement Web Optimizations, SEO, and Accessibility",
            "description": "Enhance the refactored application with comprehensive performance, SEO, and accessibility improvements to meet modern web standards and compliance goals.",
            "dependencies": [
              "3.4"
            ],
            "details": "Performance: Implement image lazy-loading, configure manual code-splitting in `vite.config.ts` for vendor/ui/editor chunks, and apply PurgeCSS. SEO/GEO: Install and configure `vite-plugin-sitemap`, generate RSS feed, implement dynamic meta tags with `react-helmet-async`, and expose an OpenAPI 3 spec. Accessibility: Implement high-contrast theme variables, add ARIA attributes to UI components, and target a WCAG AA score of ≥95.",
            "status": "pending",
            "testStrategy": "Use Lighthouse to verify performance and accessibility scores (target ≥95). Manually verify the existence and correctness of `/sitemap.xml`, `/feed.xml`, and `/openapi.json` after a production build. Use an accessibility checker tool like Axe to audit key pages for WCAG AA compliance."
          }
        ]
      },
      {
        "id": 4,
        "title": "Resolve \"Tenant or user not found\" Database Connection Crisis",
        "description": "Systematically diagnose and resolve the Neon-specific \"Tenant or user not found\" database error through a series of radical solutions, starting with direct connection testing and progressing through multiple fallback options including provider migration, direct connections, and complete platform change if necessary.",
        "status": "pending",
        "dependencies": [
          2
        ],
        "priority": "medium",
        "details": "This is a critical incident requiring immediate action. The error indicates a fundamental connection string or database setup issue with Neon. Execute solutions in order until resolution is achieved.\n\n**1. Immediate Diagnostic Testing:**\n- Test direct database connection without application code:\n```bash\n# Test with pooler\npsql \"postgresql://neondb_owner:npg_TcbpP7ezUJu6@ep-dark-brook-ae83i5pz-pooler.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require\"\n\n# Test without pooler\npsql \"postgresql://neondb_owner:npg_TcbpP7ezUJu6@ep-dark-brook-ae83i5pz.c-2.us-east-2.aws.neon.tech/neondb?sslmode=require\"\n```\n\n**2. Radical Solution Options (In Priority Order):**\n\nA. **Switch to Render PostgreSQL:**\n- Create new Render PostgreSQL instance (free tier)\n- Copy Internal Database URL\n- Update .env with new DATABASE_URL\n- No SSL configuration needed\n\nB. **Use Direct Neon Connection:**\n- Remove pooler from connection string\n- Update DATABASE_URL to use direct connection endpoint\n\nC. **Implement Emergency Mock Data:**\n```typescript\n// server/index.ts\nlet storage = {\n  getArticles: async () => ({\n    articles: [\n      { id: 1, title: \"Welcome to SafraReport\", content: \"Database coming soon\", category: \"news\" }\n    ],\n    total: 1\n  }),\n  getFeaturedArticles: async () => ({ articles: [], total: 0 }),\n  getBreakingNews: async () => ({ articles: [], total: 0 })\n};\n```\n\nD. **Migrate to Supabase:**\n- Create free Supabase project\n- Use connection string from Settings > Database\n- Leverage built-in web interface for table creation\n\n**3. Emergency Error Handling:**\n```typescript\n// Add to server/index.ts\napp.use((err, req, res, next) => {\n  console.error('Database error:', err);\n  res.json({ \n    error: \"Database temporarily unavailable\",\n    articles: [], \n    total: 0 \n  });\n});\n```\n\n**4. Nuclear Option:**\n- Create new GitHub repository\n- Deploy to Vercel platform\n- Implement Vercel Postgres for automatic database integration\n- Migrate existing data to new setup",
        "testStrategy": "**1. Connection Verification:**\n- Document output of direct psql connection attempts (both pooler and non-pooler)\n- Verify database existence in Neon dashboard\n- Test password reset if needed\n- Confirm Neon account status\n\n**2. Solution Testing:**\n\nFor Render Migration:\n- Verify successful connection to new Render database\n- Test data migration integrity\n- Run full application test suite against new database\n\nFor Direct Neon Connection:\n- Confirm connection without pooler\n- Test all database-dependent endpoints\n\nFor Mock Data Implementation:\n- Verify all API endpoints return mock data\n- Confirm error handling returns appropriate responses\n- Test frontend functionality with mock responses\n\nFor Supabase Migration:\n- Verify SSL connection works out of the box\n- Test table creation and data migration\n- Run full application test suite\n\n**3. Emergency Handling Verification:**\n- Simulate database failures\n- Verify error middleware catches all database errors\n- Confirm frontend gracefully handles error responses\n\n**4. Platform Migration Testing:**\n- Verify Vercel deployment\n- Test Vercel Postgres connection\n- Validate complete application functionality in new environment",
        "subtasks": [
          {
            "id": 1,
            "title": "Diagnose Neon Connection with Direct psql Tests",
            "description": "Execute direct psql connection tests to the Neon database, both with and without the connection pooler, to isolate the 'Tenant or user not found' error and determine if the issue lies with the credentials, the service, or the pooler.",
            "dependencies": [],
            "details": "Use the provided psql commands to connect directly from a terminal. Document the exact output for both the pooler and non-pooler endpoints. Check the Neon project dashboard for any reported outages, status issues, or incorrect credentials. This is the foundational step to guide all subsequent actions.",
            "status": "pending",
            "testStrategy": "1. Execute `psql` command with the pooler URL. 2. Execute `psql` command with the direct (non-pooler) URL. 3. Document the success or failure, including any error messages, for both attempts. 4. Verify the Neon project status is 'Active' in the Neon console."
          },
          {
            "id": 2,
            "title": "Implement Graceful Error Handling for Database Unavailability",
            "description": "Add emergency middleware to the Express server (server/index.ts) to catch database connection errors and return a user-friendly message and an empty data structure, preventing application crashes during the outage.",
            "dependencies": [],
            "details": "Implement the provided Express error handling middleware. This will intercept any errors propagated from the database layer and respond with a JSON object like `{ \"error\": \"Database temporarily unavailable\", \"articles\": [], \"total\": 0 }`. This improves user experience while the root cause is being addressed and can be implemented in parallel to diagnostics.",
            "status": "pending",
            "testStrategy": "1. Temporarily modify the DATABASE_URL in the .env file to be invalid. 2. Restart the server and make a request to an API endpoint that queries the database. 3. Verify the API returns a 200 OK status with the specified graceful error JSON response, and the server process does not crash."
          },
          {
            "id": 3,
            "title": "Execute Primary Fallback: Migrate to a New Render PostgreSQL Instance",
            "description": "If direct Neon connection tests fail, execute the primary radical solution by creating a new PostgreSQL instance on Render and reconfiguring the application to use it.",
            "dependencies": [
              "4.1"
            ],
            "details": "Provision a new PostgreSQL database on the Render platform (free tier is sufficient). Obtain the 'Internal Database URL' from the Render dashboard. Update the `DATABASE_URL` environment variable in the project's configuration. Redeploy the application to connect to the new database. This is the first-priority migration option as per the incident plan.",
            "status": "pending",
            "testStrategy": "1. After deployment with the new `DATABASE_URL`, verify the application starts without connection errors. 2. Use API endpoints to create a new test article. 3. Use API endpoints to fetch the list of articles and confirm the new test article is present. 4. Connect to the Render database directly to confirm data persistence."
          },
          {
            "id": 4,
            "title": "Execute Secondary Fallbacks: Attempt Neon Direct Connection or Implement Mock Data",
            "description": "If the Render migration fails, attempt the next fallback options in order: first, try to connect to Neon using the direct (non-pooler) endpoint. If that also fails, implement a temporary mock data layer.",
            "dependencies": [
              "4.3"
            ],
            "details": "This subtask has two sequential steps. First, update the `DATABASE_URL` to use the Neon direct connection endpoint (removing '-pooler' from the hostname) and test. If this does not resolve the issue, proceed to modify `server/index.ts` to replace database calls with the provided hardcoded `storage` object to restore frontend functionality with static data.",
            "status": "pending",
            "testStrategy": "1. For the direct connection attempt, verify if API calls succeed after updating the `DATABASE_URL`. 2. If proceeding to mock data, verify that the API returns the hardcoded 'Welcome to SafraReport' article, allowing the frontend to render without a live database connection."
          },
          {
            "id": 5,
            "title": "Execute Final Fallbacks: Migrate to Supabase or Vercel Postgres",
            "description": "As a last resort, if all previous solutions fail, execute the final contingency plan by migrating the database to Supabase, or as a nuclear option, redeploying the entire application on Vercel with Vercel Postgres.",
            "dependencies": [
              "4.4"
            ],
            "details": "This is the final step in the crisis resolution plan. First, attempt migration to a free Supabase project by creating the project, obtaining its connection string, and recreating the schema. If that fails, execute the nuclear option: create a new GitHub repository, deploy the project to Vercel, and integrate it with a new Vercel Postgres instance.",
            "status": "pending",
            "testStrategy": "1. For the chosen platform (Supabase or Vercel), verify the application connects successfully to the new database. 2. Perform a full suite of CRUD tests via the API to ensure all database interactions are functional. 3. Confirm the application is stable and performs as expected in the new environment."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-07-23T16:59:29-04:00",
      "updated": "2025-07-31T16:37:31.653Z",
      "description": "Tasks for master context"
    }
  }
}